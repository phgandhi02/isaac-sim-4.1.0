from dataclasses import dataclass
from unittest.mock import patch

import carb.settings
import usdrt
from pxr import Usd, UsdGeom, UsdPhysics, UsdUtils

import omni.client
import omni.structuredlog
from omni.kit.test import AsyncTestCase
from omni.physxtelemetry.physx_telemetry import OmniPhysXTelemetry


@dataclass
class StatsClass:
    nbMeshes: float = 0.0
    nbSharedMeshes: float = 0.0
    nbCookedMeshes: float = 0.0


class TelemetryTest(AsyncTestCase):

    def __init__(self, tests=()):
        super().__init__(tests)
        self._physics_telemetry_logging_orig_val = OmniPhysXTelemetry.debug_logging
        self._settings = carb.settings.get_settings()

    # Before running each test
    def setUp(self):
        super().setUp()
        OmniPhysXTelemetry.debug_logging = True
        OmniPhysXTelemetry.telemetry_is_enabled = True
        # carb.log_error(omni.physxtelemetry.SETTING_PHYSICS_TELEMETRY_ENABLED)
        self._physics_telemetry_logging_orig_val = self._settings.get_as_bool(omni.physxtelemetry.SETTING_PHYSICS_TELEMETRY_ENABLED)
        self._settings.set_bool(omni.physxtelemetry.SETTING_PHYSICS_TELEMETRY_ENABLED, True)

    def tearDown(self):
        super().tearDown()
        OmniPhysXTelemetry.debug_logging = self._physics_telemetry_logging_orig_val
        self._settings.set_bool(omni.physxtelemetry.SETTING_PHYSICS_TELEMETRY_ENABLED, self._physics_telemetry_logging_orig_val)
        OmniPhysXTelemetry.telemetry_is_enabled = self._physics_telemetry_logging_orig_val

    @patch.object(omni.structuredlog, 'send_event')
    async def test_telemetry_events_and_autogenerated_methods(self, mock_structuredlog_sendevent):
        OmniPhysXTelemetry.log_omni_physx_zerog_activated()
        OmniPhysXTelemetry.log_omni_physx_stage_apis("PhysxDeformableBodyAPI;PhysxParticleSystem;PhysicsCollisionAPI;PhysicsRevoluteJointAPI")
        assert mock_structuredlog_sendevent.call_count == 2

    async def test_usdrt_api_gathering_from_stage(self):
        stage: Usd.Stage = Usd.Stage.CreateInMemory()
        assert stage is not None
        cache: Usd.StageCache = UsdUtils.StageCache.Get()
        cache.Insert(stage)

        box = UsdGeom.Cube.Define(stage, "/World/box")
        UsdPhysics.CollisionAPI.Apply(box.GetPrim())

        stage_id = UsdUtils.StageCache.Get().GetId(stage).ToLongInt()
        usdrtStage = usdrt.Usd.Stage.Attach(stage_id)
        assert usdrtStage is not None

        prim_path = usdrtStage.GetPrimsWithAppliedAPIName("PhysicsCollisionAPI")
        assert len(prim_path) == 1
